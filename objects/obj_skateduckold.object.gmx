<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_skateduck</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Variables

x_speed_max = 15;
x_move_max = 10;
y_maxspeed = 5;

x_speed = 0;
y_speed = 0;

x_move = 0;
y_move = 0;



curr_sprite = "none";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>curr_spr = "crouch2";
alarm[4] = room_speed*0.1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set current to none

curr_spr = "none";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Display Sprite

if ( curr_spr == "ollie" ) {
    image_index = 4;
}
else if ( curr_spr == "push" ) {
    image_index = 3;
}
else if ( curr_spr == "crouch2" ) {
    image_index = 2;
}
else if ( curr_spr == "crouch" ) {
    image_index = 1;
}
else {
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Read Input

space_held = keyboard_check(vk_space);
space_released = keyboard_check_released(vk_space);

z_pressed = keyboard_check_pressed(ord('Z'));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

if ( y_speed &lt; y_maxspeed ) {
    y_speed += global.g;
}

// While on the ground
if ( collision_line( x, y+1, x+15, y+1, obj_ground, 0, 0 ) ) {

    // y_speed = 0 if moving downward
    if ( y_speed &gt; 0 ) y_speed = 0;
    
    // set friction while on ground
    // decrease x_speed towards 0 if x_speed is positive
    // increase x_speed towards 0 if x_speed is negative
    if ( x_speed &gt; 0 ) {
        x_speed += -0.1;
        if ( x_speed &lt; 0 ) x_speed = 0;
    }
    else if ( x_speed &lt; 0 ) {
        x_speed += 0.1;
        if ( x_speed &gt; 0 ) x_speed = 0;
    }
    
    // jump if space + z while on ground
    if ( space_held ) {
        if ( z_pressed ) {
            x_speed += 1;
            y_speed += -5;
            
            curr_spr = "ollie";
            alarm[4] = room_speed*0.2
        }
        else {
            curr_spr = "crouch";
        }
        
    }
    // push if space released while on ground
    else if ( space_released ) {
        x_speed += 2;
        if ( x_speed &gt; x_speed_max ) {
            x_speed = x_speed_max;
        }
        
        curr_spr = "push";
        alarm[4] = room_speed*0.1
    }
}
// While in the air
else {
    if ( space_held ) {
        if ( x_speed &lt; 1 ) x_speed = 1;
    }
}

// x collision
if ( collision_line( x+17+x_speed, y-15+y_speed, 
x+17+x_speed, y+y_speed, obj_ground, 0, 0 ) ) {

    var x_distance = 0;
    
    while ( !collision_line( x+17+x_distance, y-15+y_speed,
    x+17+x_distance, y+y_speed, obj_ground, 0, 0 ) ) {
        x_distance++;
    }
    x_move = x_distance;
}
else {
    x_move = x_speed;
    if ( x_move &gt; x_move_max ) {
        x_move = x_move_max;
    }
}

// y collision
if ( collision_line( x+x_speed, y+1+y_speed, 
x+14+x_speed, y+1+y_speed, obj_ground, 0, 0 ) ) {

    var y_distance = 0;
    
    while ( !collision_line( x+x_speed, y+1+y_distance, 
    x+15+x_speed, y+1+y_distance, obj_ground, 0, 0 ) ) {
        y_distance++;
    }
    y_move = y_distance;
}
else y_move = y_speed;

x += x_move;
y += y_move;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
