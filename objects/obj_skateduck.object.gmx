<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_skateduck</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Variables

// x_speed_max is duck's maximum current speed.
// x_move_max is duck's maximum actual movement each frame.
// the difference allows duck to maintain top speed for a while 
// before his speed drops.
x_speed_max = 16;
x_move_max = 8;
// y_speed_max is duck's maximum downward speed.
// duck has no maximum upward speed.
y_speed_max = 10;

// These are just variables that need to be initialized.
x_speed = 0;
y_speed = 0;
x_move = 0;
y_move = 0;

// current is the current action, current_type
// specifies the type of action.
// (current)(current_type) = (action)
// 00 = nothing
// 01 = crouch
// 10 = push
// 20 = grind
// 30 = ollie
current = 0;
current_type = 0;

sprite_reset = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_reset = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Display

if ( current == 3 ) {
    sprite_index = spr_skateduck_ollie;
    sprite_reset = false;
    alarm[2] = room_speed*0.2;
}
else if ( current == 0 &amp;&amp; current_type == 1 ) {
    sprite_index = spr_skateduck_crouch;
    sprite_reset = true;
    alarm[2] = 0;
}
else if ( current == 1 ) {
    image_speed = 0.4;
    sprite_index = spr_skateduck_push;
    image_index = 0;
    sprite_reset = false;
    alarm[2] = room_speed * 0.2;
} 
else if ( sprite_reset == true ) {
    sprite_index = spr_skateduck;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Read Input

// Holding tap will make duck crouch, which sets him up
// to push or do tricks and allows duck to grind on rails.
tap_held = keyboard_check( vk_space );

// Releasing tap will make duck push,
// giving speed while on the ground.
tap_released = keyboard_check_released( vk_space );

// Swiping in a direction will make duck jump and
// perform a trick.
// up performs an ollie
swipe_up = tap_held &amp;&amp; keyboard_check_pressed( ord('Z') );
// diagonal performs a kickflip
swipe_diag = tap_held &amp;&amp; keyboard_check_pressed( ord('X') );
// right performs a shuv it
swipe_right = tap_held &amp;&amp; keyboard_check_pressed( ord('C') );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Determine Current Action and Movement

// Gravity applies. Downward speed is applied to duck 
// on every frame.
y_speed += global.g;
if ( y_speed &gt; y_speed_max ) y_speed = y_speed_max;

// current resets every frame.
current = 0;

// current_ground is the ground that is under
// duck's position at the start of this frame.
var current_ground = collision_line( x, y, x+15, y, 
obj_ground, 0, 0 );

// If duck is on the ground, tapping will crouch,
// tricks can be performed, and friction will apply.
if ( current_ground != noone ) {

    // current_type resets on the ground.
    current_type = 0;
    
    // Input determines current action.
    if ( tap_held ) current_type = 1;
    else if ( tap_released ) current = 1;
    if ( swipe_up ) {
        current = 3;
        current_type = 0;
    }
    else if ( swipe_diag ) {
        current = 3;
        current_type = 1;
    }
    else if ( swipe_right ) {
        current = 3;
        current_type = 2;
    }
    
    // Downward speed is stopped and friction applies 
    // if duck is doing nothing or crouching. downward
    // speed is set to 0, x_speed is moved towards 0.
    if ( current == 0 ) {
        if ( y_speed &gt; 0 ) y_speed = 0;
        if ( x_speed &gt; 0 ) {
            x_speed += -global.f;
            if ( x_speed &lt; 0 ) x_speed = 0;
        }
        else if ( x_speed &lt; 0 ) {
            x_speed += global.f;
            if ( x_speed &gt; 0 ) x_speed = 0;
        }
    }
}

// Determine action
if ( current == 1 ) {
    x_speed += 2;
    if ( x_speed &gt; x_speed_max ) x_speed = x_speed_max;
}
else if ( current == 2 ) {
    
}
else if ( current == 3 ) {
    x_speed += 1;
    if ( x_speed &gt; x_speed_max ) x_speed = x_speed_max;
    y_speed += -6;
}

x_move = x_speed;
if ( x_move &gt; x_move_max ) x_move = x_move_max;
y_move = y_speed;

var x_next = x+x_move;
var y_next = y+y_move;
var collision_line1 = collision_line( x, y, x_next, y_next, obj_ground, 0, 0 );
var collision_line2 = collision_line( x_next+15, y, x_next+15, y_next, obj_ground, 0, 0);

if ( y &lt; y_next &amp;&amp;
( collision_line1 != noone || collision_line2 != noone ) ) {

    y_distance = 0;
    
    while ( !collision_line( x-8, y+y_distance,
    x+15+8, y+y_distance, obj_ground, 0, 0 ) ) {
        y_distance++;
    }
    y_move = y_distance;
}

// Make movement
global.player_speed = x_move;
y += y_move;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
